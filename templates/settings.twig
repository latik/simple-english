<div class="modal-dialog">
    <div class="modal-content">
        <div class="modal-header">
            <h4 class="modal-title" id="myModalLabel">Speech Synthesis settings</h4>
        </div>
        <div class="modal-body">
          <p id="msg"></p>
          <input type="text" name="speech-msg" id="speech-msg" x-webkit-speech value="Test speech synthesis setting"  class="form-control">
              <div class="option">
                <label for="lang">Lang</label>
                <select name="lang" id="lang" class="form-control"></select>
            </div>
            <!--div class="option">
                <label for="voice">Voice</label>
                <select name="voice" id="voice"></select>
            </div-->
            <div class="option">
                <label for="volume">Volume</label>
                <!--<input type="range" min="0" max="1"  value="1">-->
                <input class="slider" data-slider-max="10" data-slider-min="0" step="0.1" data-slider-value="1" type="text" id="volume"  name="volume">
            </div>
            <div class="option">
                <label for="rate">Rate</label>
                <!--<input type="range" min="0.1" max="10" step="0.1" name="rate" id="rate" value="1"> -->
                <input class="slider" data-slider-max="10" data-slider-min="0.1" step="0.1" data-slider-value="1" type="text" id="rate"  name="rate">
            </div>
            <div class="modal_sreak_container"><button id="speak" class="btn btn-danger  btn-lg ">Speak</button></div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            <input id="save" type="submit" name="submit" class="btn btn-primary" value="Save changes">
        </div>
    </div>
</div>
<script src="/js/bootstrap-slider.js"></script>
<script>
var mySlider = $("input.slider").bootstrapSlider();

/*
 * Check for browser support
 */
var supportMsg = document.getElementById('msg');

if ('speechSynthesis' in window) {
    supportMsg.innerHTML = 'Your browser <strong>supports</strong> speech synthesis.';
} else {
    supportMsg.innerHTML = 'Sorry your browser <strong>does not support</strong> speech synthesis.<br>Try this in <a href="http://www.google.co.uk/intl/en/chrome/browser/canary.html">Chrome Canary</a>.';
    supportMsg.classList.add('not-supported');
}

// Get the 'lang' button
var langSelect = document.getElementById('lang');

// Get the 'speak' button
var button = document.getElementById('speak');

// Get the text input element.
var speechMsgInput = document.getElementById('speech-msg');

// Get the voice select element.
//var voiceSelect = document.getElementById('voice');

// Get the attribute controls.
var volumeInput = document.getElementById('volume');
var rateInput = document.getElementById('rate');
//var pitchInput = document.getElementById('pitch');

// Fetch the list of voices and populate the voice options.
function loadVoices() {
  // Fetch the available voices.
    var voices = speechSynthesis.getVoices();

  // Loop through each of the voices.
    voices.forEach(function(voice, i) {
    // Create a new option element.
        //var nameOption = document.createElement('option');
        var langOption = document.createElement('option');

    // Set the options value and text.
        //nameOption.value = voice.name;
        //nameOption.innerHTML = voice.name;
        langOption.value = voice.lang;
        langOption.innerHTML = voice.lang + ' (' + voice.name + ')';

    // Add the option to the voice selector.
        //voiceSelect.appendChild(nameOption);
        langSelect.appendChild(langOption);
    });
}

// Execute loadVoices.
loadVoices();

// Chrome loads voices asynchronously.
window.speechSynthesis.onvoiceschanged = function(e) {
  loadVoices();
};


// Create a new utterance for the specified text and add it to
// the queue.
function settingsSpeak(text) {
  // Create a new instance of SpeechSynthesisUtterance.
    var msg = new SpeechSynthesisUtterance();

  // Set the text.
    msg.text = text;

  // Set the attributes.
    msg.volume = parseFloat(volumeInput.value);
    msg.rate = parseFloat(rateInput.value);
    //msg.pitch = parseFloat(pitchInput.value);

  // If a voice has been selected, find the voice and set the
  // utterance instance's voice attribute.
  //if (voiceSelect.value) {
  //    msg.voice = speechSynthesis.getVoices().filter(function(voice) { return voice.name == voiceSelect.value; })[0];
  //}

   // Set the lang.
    msg.lang = langSelect.value;

  console.log(msg);
  // Queue this utterance.
    window.speechSynthesis.speak(msg);
}


// Set up an event listener for when the 'speak' button is clicked.
button.addEventListener('click', function(e) {
    if (speechMsgInput.value.length > 0) {
        settingsSpeak(speechMsgInput.value);
    }
});

// Set up an event listener for when the 'save' button is clicked.
document.getElementById('save').addEventListener('click', function(e) {
     localStorage.clear();
     localStorage["volume"] = parseFloat(volumeInput.value);
     localStorage["rate"] = parseFloat(rateInput.value);
     localStorage["lang"] = langSelect.value;
     console.log(localStorage);
});


</script>
